<?php
/**
 * ConsignmentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Freightways Customer Integration
 *
 * Provisioning Freightways services as REST APIs
 *
 * OpenAPI spec version: 1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConsignmentRequest Class Doc Comment
 *
 * @category Class
 * @description Defines a group of items to deliver&lt;br/&gt;The total number of items (including each piece of a base plus item) must not exceed 99.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConsignmentRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConsignmentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'signature_required' => 'bool',
'saturday_delivery' => 'bool',
'no_split_delivery' => 'bool',
'consignment_reference' => 'string',
'consignment_date' => '\DateTime',
'service_standard' => 'string',
'sequence_id' => 'int',
'notifications' => '\Swagger\Client\Model\Notifications',
'sender' => '\Swagger\Client\Model\Sender',
'receiver' => '\Swagger\Client\Model\Receiver',
'customer_references' => '\Swagger\Client\Model\CustomerReferences',
'standard_items' => '\Swagger\Client\Model\StandardItemRequest[]',
'base_plus_items' => '\Swagger\Client\Model\BasePlusItemRequest',
'satchel_items' => '\Swagger\Client\Model\SatchelItemRequest[]',
'label' => '\Swagger\Client\Model\ConsignmentLabelRequest'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'signature_required' => null,
'saturday_delivery' => null,
'no_split_delivery' => null,
'consignment_reference' => null,
'consignment_date' => 'date-time',
'service_standard' => null,
'sequence_id' => null,
'notifications' => null,
'sender' => null,
'receiver' => null,
'customer_references' => null,
'standard_items' => null,
'base_plus_items' => null,
'satchel_items' => null,
'label' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'signature_required' => 'signatureRequired',
'saturday_delivery' => 'saturdayDelivery',
'no_split_delivery' => 'noSplitDelivery',
'consignment_reference' => 'consignmentReference',
'consignment_date' => 'consignmentDate',
'service_standard' => 'serviceStandard',
'sequence_id' => 'sequenceId',
'notifications' => 'notifications',
'sender' => 'sender',
'receiver' => 'receiver',
'customer_references' => 'customerReferences',
'standard_items' => 'standardItems',
'base_plus_items' => 'basePlusItems',
'satchel_items' => 'satchelItems',
'label' => 'label'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'signature_required' => 'setSignatureRequired',
'saturday_delivery' => 'setSaturdayDelivery',
'no_split_delivery' => 'setNoSplitDelivery',
'consignment_reference' => 'setConsignmentReference',
'consignment_date' => 'setConsignmentDate',
'service_standard' => 'setServiceStandard',
'sequence_id' => 'setSequenceId',
'notifications' => 'setNotifications',
'sender' => 'setSender',
'receiver' => 'setReceiver',
'customer_references' => 'setCustomerReferences',
'standard_items' => 'setStandardItems',
'base_plus_items' => 'setBasePlusItems',
'satchel_items' => 'setSatchelItems',
'label' => 'setLabel'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'signature_required' => 'getSignatureRequired',
'saturday_delivery' => 'getSaturdayDelivery',
'no_split_delivery' => 'getNoSplitDelivery',
'consignment_reference' => 'getConsignmentReference',
'consignment_date' => 'getConsignmentDate',
'service_standard' => 'getServiceStandard',
'sequence_id' => 'getSequenceId',
'notifications' => 'getNotifications',
'sender' => 'getSender',
'receiver' => 'getReceiver',
'customer_references' => 'getCustomerReferences',
'standard_items' => 'getStandardItems',
'base_plus_items' => 'getBasePlusItems',
'satchel_items' => 'getSatchelItems',
'label' => 'getLabel'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['signature_required'] = isset($data['signature_required']) ? $data['signature_required'] : null;
        $this->container['saturday_delivery'] = isset($data['saturday_delivery']) ? $data['saturday_delivery'] : null;
        $this->container['no_split_delivery'] = isset($data['no_split_delivery']) ? $data['no_split_delivery'] : null;
        $this->container['consignment_reference'] = isset($data['consignment_reference']) ? $data['consignment_reference'] : null;
        $this->container['consignment_date'] = isset($data['consignment_date']) ? $data['consignment_date'] : null;
        $this->container['service_standard'] = isset($data['service_standard']) ? $data['service_standard'] : null;
        $this->container['sequence_id'] = isset($data['sequence_id']) ? $data['sequence_id'] : 1;
        $this->container['notifications'] = isset($data['notifications']) ? $data['notifications'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['receiver'] = isset($data['receiver']) ? $data['receiver'] : null;
        $this->container['customer_references'] = isset($data['customer_references']) ? $data['customer_references'] : null;
        $this->container['standard_items'] = isset($data['standard_items']) ? $data['standard_items'] : null;
        $this->container['base_plus_items'] = isset($data['base_plus_items']) ? $data['base_plus_items'] : null;
        $this->container['satchel_items'] = isset($data['satchel_items']) ? $data['satchel_items'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['consignment_reference'] === null) {
            $invalidProperties[] = "'consignment_reference' can't be null";
        }
        if ($this->container['service_standard'] === null) {
            $invalidProperties[] = "'service_standard' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['receiver'] === null) {
            $invalidProperties[] = "'receiver' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets signature_required
     *
     * @return bool
     */
    public function getSignatureRequired()
    {
        return $this->container['signature_required'];
    }

    /**
     * Sets signature_required
     *
     * @param bool $signature_required Defines either signature is required or not
     *
     * @return $this
     */
    public function setSignatureRequired($signature_required)
    {
        $this->container['signature_required'] = $signature_required;

        return $this;
    }

    /**
     * Gets saturday_delivery
     *
     * @return bool
     */
    public function getSaturdayDelivery()
    {
        return $this->container['saturday_delivery'];
    }

    /**
     * Sets saturday_delivery
     *
     * @param bool $saturday_delivery Defines either saturday delivery is required or not
     *
     * @return $this
     */
    public function setSaturdayDelivery($saturday_delivery)
    {
        $this->container['saturday_delivery'] = $saturday_delivery;

        return $this;
    }

    /**
     * Gets no_split_delivery
     *
     * @return bool
     */
    public function getNoSplitDelivery()
    {
        return $this->container['no_split_delivery'];
    }

    /**
     * Sets no_split_delivery
     *
     * @param bool $no_split_delivery Defines either no-split delivery is required or not
     *
     * @return $this
     */
    public function setNoSplitDelivery($no_split_delivery)
    {
        $this->container['no_split_delivery'] = $no_split_delivery;

        return $this;
    }

    /**
     * Gets consignment_reference
     *
     * @return string
     */
    public function getConsignmentReference()
    {
        return $this->container['consignment_reference'];
    }

    /**
     * Sets consignment_reference
     *
     * @param string $consignment_reference Defines the unique customer reference for this consignment, must be alphanumeric i.e. a-z A-Z 0-9
     *
     * @return $this
     */
    public function setConsignmentReference($consignment_reference)
    {
        $this->container['consignment_reference'] = $consignment_reference;

        return $this;
    }

    /**
     * Gets consignment_date
     *
     * @return \DateTime
     */
    public function getConsignmentDate()
    {
        return $this->container['consignment_date'];
    }

    /**
     * Sets consignment_date
     *
     * @param \DateTime $consignment_date Consignment date in Utc. If not provided the current date will be used.
     *
     * @return $this
     */
    public function setConsignmentDate($consignment_date)
    {
        $this->container['consignment_date'] = $consignment_date;

        return $this;
    }

    /**
     * Gets service_standard
     *
     * @return string
     */
    public function getServiceStandard()
    {
        return $this->container['service_standard'];
    }

    /**
     * Sets service_standard
     *
     * @param string $service_standard Service Standard (Overnight, Two Day, Same Day) for the consignment (case insensitive)
     *
     * @return $this
     */
    public function setServiceStandard($service_standard)
    {
        $this->container['service_standard'] = $service_standard;

        return $this;
    }

    /**
     * Gets sequence_id
     *
     * @return int
     */
    public function getSequenceId()
    {
        return $this->container['sequence_id'];
    }

    /**
     * Sets sequence_id
     *
     * @param int $sequence_id Used when customer operate multiple sites repeating consignment numbers. If not provided 1 will be used.
     *
     * @return $this
     */
    public function setSequenceId($sequence_id)
    {
        $this->container['sequence_id'] = $sequence_id;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return \Swagger\Client\Model\Notifications
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param \Swagger\Client\Model\Notifications $notifications notifications
     *
     * @return $this
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \Swagger\Client\Model\Sender
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \Swagger\Client\Model\Sender $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets receiver
     *
     * @return \Swagger\Client\Model\Receiver
     */
    public function getReceiver()
    {
        return $this->container['receiver'];
    }

    /**
     * Sets receiver
     *
     * @param \Swagger\Client\Model\Receiver $receiver receiver
     *
     * @return $this
     */
    public function setReceiver($receiver)
    {
        $this->container['receiver'] = $receiver;

        return $this;
    }

    /**
     * Gets customer_references
     *
     * @return \Swagger\Client\Model\CustomerReferences
     */
    public function getCustomerReferences()
    {
        return $this->container['customer_references'];
    }

    /**
     * Sets customer_references
     *
     * @param \Swagger\Client\Model\CustomerReferences $customer_references customer_references
     *
     * @return $this
     */
    public function setCustomerReferences($customer_references)
    {
        $this->container['customer_references'] = $customer_references;

        return $this;
    }

    /**
     * Gets standard_items
     *
     * @return \Swagger\Client\Model\StandardItemRequest[]
     */
    public function getStandardItems()
    {
        return $this->container['standard_items'];
    }

    /**
     * Sets standard_items
     *
     * @param \Swagger\Client\Model\StandardItemRequest[] $standard_items Defines standard rated items in the consignments
     *
     * @return $this
     */
    public function setStandardItems($standard_items)
    {
        $this->container['standard_items'] = $standard_items;

        return $this;
    }

    /**
     * Gets base_plus_items
     *
     * @return \Swagger\Client\Model\BasePlusItemRequest
     */
    public function getBasePlusItems()
    {
        return $this->container['base_plus_items'];
    }

    /**
     * Sets base_plus_items
     *
     * @param \Swagger\Client\Model\BasePlusItemRequest $base_plus_items base_plus_items
     *
     * @return $this
     */
    public function setBasePlusItems($base_plus_items)
    {
        $this->container['base_plus_items'] = $base_plus_items;

        return $this;
    }

    /**
     * Gets satchel_items
     *
     * @return \Swagger\Client\Model\SatchelItemRequest[]
     */
    public function getSatchelItems()
    {
        return $this->container['satchel_items'];
    }

    /**
     * Sets satchel_items
     *
     * @param \Swagger\Client\Model\SatchelItemRequest[] $satchel_items Defines satchels included in the consignment
     *
     * @return $this
     */
    public function setSatchelItems($satchel_items)
    {
        $this->container['satchel_items'] = $satchel_items;

        return $this;
    }

    /**
     * Gets label
     *
     * @return \Swagger\Client\Model\ConsignmentLabelRequest
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param \Swagger\Client\Model\ConsignmentLabelRequest $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
