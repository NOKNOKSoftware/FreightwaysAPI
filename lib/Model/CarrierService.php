<?php
/**
 * CarrierService
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Freightways Customer Integration
 *
 * Provisioning Freightways services as REST APIs
 *
 * OpenAPI spec version: 1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CarrierService Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CarrierService implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CarrierService';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'carrier_name' => 'string',
'branch_code' => 'string',
'run' => '\Swagger\Client\Model\Run',
'non_urban' => 'bool',
'options' => '\Swagger\Client\Model\CarrierServiceOptions',
'business' => 'bool',
'conditions' => '\Swagger\Client\Model\CarrierServiceConditions',
'same_day_zone' => 'string',
'evening_zone' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'carrier_name' => null,
'branch_code' => null,
'run' => null,
'non_urban' => null,
'options' => null,
'business' => null,
'conditions' => null,
'same_day_zone' => null,
'evening_zone' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier_name' => 'carrierName',
'branch_code' => 'branchCode',
'run' => 'run',
'non_urban' => 'nonUrban',
'options' => 'options',
'business' => 'business',
'conditions' => 'conditions',
'same_day_zone' => 'sameDayZone',
'evening_zone' => 'eveningZone'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier_name' => 'setCarrierName',
'branch_code' => 'setBranchCode',
'run' => 'setRun',
'non_urban' => 'setNonUrban',
'options' => 'setOptions',
'business' => 'setBusiness',
'conditions' => 'setConditions',
'same_day_zone' => 'setSameDayZone',
'evening_zone' => 'setEveningZone'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier_name' => 'getCarrierName',
'branch_code' => 'getBranchCode',
'run' => 'getRun',
'non_urban' => 'getNonUrban',
'options' => 'getOptions',
'business' => 'getBusiness',
'conditions' => 'getConditions',
'same_day_zone' => 'getSameDayZone',
'evening_zone' => 'getEveningZone'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['carrier_name'] = isset($data['carrier_name']) ? $data['carrier_name'] : null;
        $this->container['branch_code'] = isset($data['branch_code']) ? $data['branch_code'] : null;
        $this->container['run'] = isset($data['run']) ? $data['run'] : null;
        $this->container['non_urban'] = isset($data['non_urban']) ? $data['non_urban'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['business'] = isset($data['business']) ? $data['business'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['same_day_zone'] = isset($data['same_day_zone']) ? $data['same_day_zone'] : null;
        $this->container['evening_zone'] = isset($data['evening_zone']) ? $data['evening_zone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier_name
     *
     * @return string
     */
    public function getCarrierName()
    {
        return $this->container['carrier_name'];
    }

    /**
     * Sets carrier_name
     *
     * @param string $carrier_name carrier_name
     *
     * @return $this
     */
    public function setCarrierName($carrier_name)
    {
        $this->container['carrier_name'] = $carrier_name;

        return $this;
    }

    /**
     * Gets branch_code
     *
     * @return string
     */
    public function getBranchCode()
    {
        return $this->container['branch_code'];
    }

    /**
     * Sets branch_code
     *
     * @param string $branch_code branch_code
     *
     * @return $this
     */
    public function setBranchCode($branch_code)
    {
        $this->container['branch_code'] = $branch_code;

        return $this;
    }

    /**
     * Gets run
     *
     * @return \Swagger\Client\Model\Run
     */
    public function getRun()
    {
        return $this->container['run'];
    }

    /**
     * Sets run
     *
     * @param \Swagger\Client\Model\Run $run run
     *
     * @return $this
     */
    public function setRun($run)
    {
        $this->container['run'] = $run;

        return $this;
    }

    /**
     * Gets non_urban
     *
     * @return bool
     */
    public function getNonUrban()
    {
        return $this->container['non_urban'];
    }

    /**
     * Sets non_urban
     *
     * @param bool $non_urban non_urban
     *
     * @return $this
     */
    public function setNonUrban($non_urban)
    {
        $this->container['non_urban'] = $non_urban;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Swagger\Client\Model\CarrierServiceOptions
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Swagger\Client\Model\CarrierServiceOptions $options options
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets business
     *
     * @return bool
     */
    public function getBusiness()
    {
        return $this->container['business'];
    }

    /**
     * Sets business
     *
     * @param bool $business business
     *
     * @return $this
     */
    public function setBusiness($business)
    {
        $this->container['business'] = $business;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \Swagger\Client\Model\CarrierServiceConditions
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \Swagger\Client\Model\CarrierServiceConditions $conditions conditions
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets same_day_zone
     *
     * @return string
     */
    public function getSameDayZone()
    {
        return $this->container['same_day_zone'];
    }

    /**
     * Sets same_day_zone
     *
     * @param string $same_day_zone same_day_zone
     *
     * @return $this
     */
    public function setSameDayZone($same_day_zone)
    {
        $this->container['same_day_zone'] = $same_day_zone;

        return $this;
    }

    /**
     * Gets evening_zone
     *
     * @return string
     */
    public function getEveningZone()
    {
        return $this->container['evening_zone'];
    }

    /**
     * Sets evening_zone
     *
     * @param string $evening_zone evening_zone
     *
     * @return $this
     */
    public function setEveningZone($evening_zone)
    {
        $this->container['evening_zone'] = $evening_zone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
